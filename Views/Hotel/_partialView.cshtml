@model MVCBookingFinal_YARAB_.ViewModels.HotelViewModel
@{
    var selectlist = Enum.GetValues(typeof(AmenityEnum))
                    .Cast<AmenityEnum>()
                    .Where(a => a != AmenityEnum.WiFi)  // Optional: Filter out a specific enum value
                    .Select(a => new SelectListItem
                            {
                                Value = ((int)a).ToString(),  // Enum integer value
                                Text = a.ToString()        // Enum string name

                            })
                    .ToList();


}
<div class="d-flex" style="gap:10px;">


<div class="col-6">
<div class="form-group">
    <label asp-for="Name" class="control-label"></label>
    <input asp-for="Name" class="form-control" />
    <span asp-validation-for="Name" class="text-danger"></span>
</div>
<div class="form-group">
    <label asp-for="Description" class="control-label"></label>
    <input asp-for="Description" class="form-control" />
    <span asp-validation-for="Description" class="text-danger"></span>
</div>
<div class="form-group">
    <label asp-for="CityId" class="control-label"></label>
    <select asp-for="CityId" class="form-control" asp-items="ViewBag.cityselectlist"></select>
</div>
<div class="form-group">
    <label asp-for="starRating" class="control-label"></label>
    <input asp-for="starRating" class="form-control" />
    <span asp-validation-for="starRating" class="text-danger"></span>
</div>
</div>

<div class="col-6">
<div class="form-group">
    <label asp-for="Address" class="control-label"></label>
    <input asp-for="Address" class="form-control" />
    <span asp-validation-for="Address" class="text-danger"></span>
</div>
<div class="form-group">
    <label asp-for="Email" class="control-label"></label>
    <input asp-for="Email" class="form-control" />
    <span asp-validation-for="Email" class="text-danger"></span>
</div>
<div class="form-group">
    <label asp-for="PhoneNumber" class="control-label"></label>
    <input asp-for="PhoneNumber" class="form-control" />
    <span asp-validation-for="PhoneNumber" class="text-danger"></span>
</div>
<div class="form-group">
    <label asp-for="Images" class="control-label">Upload Images</label>
    <input asp-for="Images" type="file" class="form-control" multiple>

</div>
</div>
</div>
<div class="form-group col-12">
    <label asp-for="Ameneties" class="control-label"></label>
    <select asp-for="Ameneties" class="form-control" asp-items="selectlist" multiple>
    </select>
</div>




<h3>Click on the map to choose a location</h3>
<input id="searchBox" type="text" placeholder="Search by country or city">
<div id="map"></div>
<p>Latitude: <input asp-for="Latitude" id="latitude" value="@Model?.Latitude" readonly></p>
<p>Longitude: <input asp-for="Longitude" id="longitude" value="@Model?.Longitude" readonly></p>



@{
    string lat = Model?.Latitude ?? "37";
    string lng = Model?.Longitude ?? "-120";
    lat = lat == "" ? "37" : lat;
    lng = lng == "" ? "-120" : lng;
}
<script>
    let map, marker, searchBox;

        document.addEventListener("DOMContentLoaded", function () {

    window.initMap=function() {
        // Initial map setup
       let lat = parseFloat("@lat");
        let lng = parseFloat("@lng");
        map = new google.maps.Map(document.getElementById('map'), {
            center:{lat:lat,lng:lng},
            //{ lat:"lat" , lng: "lng" }, // Default location (San Francisco)
            zoom: 12
        });

        marker = new google.maps.Marker({
            map: map,
            draggable: true,
            position: map.getCenter()
        });

        // Search Box functionality
        searchBox = new google.maps.places.SearchBox(document.getElementById('searchBox'));
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(document.getElementById('searchBox'));

        // Bias the SearchBox results to the map's viewport
        map.addListener('bounds_changed', function() {
            searchBox.setBounds(map.getBounds());
        });

        // When the user selects a place from the suggestions
        searchBox.addListener('places_changed', function() {
            const places = searchBox.getPlaces();

            if (places.length == 0) {
                return;
            }

            // Clear previous markers
            marker.setMap(null);

            // Get the details of the selected place
            const place = places[0];
            const lat = place.geometry.location.lat();
            const lng = place.geometry.location.lng();

            // Update the marker and the map center
            marker.setPosition(place.geometry.location);
            map.setCenter(place.geometry.location);

            // Update the input fields with the new coordinates
            document.getElementById('latitude').value = lat;
            document.getElementById('longitude').value = lng;
        });

        // When the user clicks on the map, update the marker and input fields
        google.maps.event.addListener(map, 'click', function(event) {
            const lat = event.latLng.lat();
            const lng = event.latLng.lng();

            marker.setPosition(event.latLng);
            document.getElementById('latitude').value = lat;
            document.getElementById('longitude').value = lng;
        });

        // When the user drags the marker, update the input fields
        google.maps.event.addListener(marker, 'dragend', function() {
            const lat = marker.getPosition().lat();
            const lng = marker.getPosition().lng();
            document.getElementById('latitude').value = lat;
            document.getElementById('longitude').value = lng;
        });
    }

            });
  
    function submitCoordinates() {
        const lat = document.getElementById('latitude').value;
        const lng = document.getElementById('longitude').value;

        if (!lat || !lng) {
            alert('Please select a location on the map!');
            return;
        }

        // Send the selected coordinates to your C# backend (AJAX or Fetch)
        fetch('/api/coordinates/submit', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ latitude: lat, longitude: lng })
        })
        .then(response => response.json())
        .then(data => {
            alert('Coordinates submitted successfully!');
        })
        .catch(error => {
            console.error('Error submitting coordinates:', error);
        });
    }
</script>

         @inject IConfiguration config
@{
    string first = "https://maps.googleapis.com/maps/api/js?key=";
    string second = config["GoogleMapsApiKey"];
    string third = "&libraries=places&callback=initMap";
    string src = first + second + third;

}
<script src="@src" async defer></script>